// Storing the Human's Responsesimport java.util.Scanner;public class RudeQuestions {	public static void main( String[] args ) {		String name;		int age, day;		double weight, income;				Scanner keyboard = new Scanner(System.in);				System.out.print( "Hello. What is your name? " );		name = keyboard.next();				System.out.print( "Hi, " + name + "! How old are you? " );		age = keyboard.nextInt();				System.out.println( "So you're " + age + ", eh? That's not very old." );		System.out.print( "How much do you weigh, " + name +  "? ");		weight = keyboard.nextDouble();				System.out.println( weight + "! Better keep that quiet!!" );		System.out.print("Finally, what's your income, " + name + "? " );		income = keyboard.nextDouble();						System.out.print( "Hopefully that is " + income + " per hour" );		System.out.println( " and not per year!" );		System.out.print( "Well, thanks for answering my rude questions, " );		System.out.println( name + "." );				System.out.print( "LAST Q: What day were you born on " + name + "? " );		day = keyboard.nextInt();		System.out.println( "Alrighty, so you were born on day " + day + " of the month." );	}}/* Line 14, 17, 21, 25: Reads in and stores values into variable.	Then, on Line 16, (20, 24, 30) 19, 23, 27: Those stored values are displayed on screen! */	// With some variables and Scanner object, humans can type in info and computer stores it as variable!/* e.g. Line 9: variable 'income' declared (choose name and type) but until Line 25, UNDEFINED	Line 25: 'income' is INITIALISED (given first value in programme).	If attempted to print 'income' value prior to Line 25, programme would not compile. */	// DECLARING VARIABLES	/* Java = STATICALLY TYPED prog lang. -> Type of variable (int, double, string, etc) is STATIC: CANNOT BE CHANGED.		MANIFEST TYPING = declare variables before you can use (Java/ C/ C#) -> tell compiler 				Many modern prog langs: "TYPE INFERENCE": compiler infers variable type by how used in code (Python / Swift)				DYNAMICALLY TYPED -> allow you to change variable type (from one part of code to another) (Ruby, JavaScript, Perl) */				/* Dynamic typing:			:) -> more powerful			:( -> makes certain types of errors possible (that static type checkers would easily catch) */